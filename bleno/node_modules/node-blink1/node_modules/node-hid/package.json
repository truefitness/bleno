{
  "name": "node-hid",
  "description": "USB HID device access library",
  "version": "0.5.1",
  "author": {
    "name": "Hans HÃ¼bner",
    "email": "hans.huebner@gmail.com",
    "url": "https://github.com/hanshuebner"
  },
  "contributors": [
    {
      "name": "Blake Miner",
      "email": "miner.blake@gmail.com"
    },
    {
      "name": "Tod Kurt",
      "email": "todbotdotcom@gmail.com",
      "url": "https://github.com/todbot"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/node-hid/node-hid.git"
  },
  "scripts": {
    "test": "node nodehid.js",
    "prepublish": "git submodule update --init",
    "install": "node-pre-gyp install --fallback-to-build"
  },
  "binary": {
    "module_name": "HID",
    "module_path": "./build/{module_name}/v{version}/{configuration}/{node_abi}-{platform}-{arch}/",
    "remote_path": "./{module_name}/v{version}/{configuration}/",
    "package_name": "{node_abi}-{platform}-{arch}.tar.gz",
    "host": "https://node-hid.s3.amazonaws.com"
  },
  "main": "./nodehid.js",
  "engines": {
    "node": ">=4.0.0"
  },
  "license": "(MIT OR X11)",
  "dependencies": {
    "nan": "^2.0.9",
    "node-pre-gyp": "^0.6.12"
  },
  "devDependencies": {
    "aws-sdk": "^2.2.9"
  },
  "readme": "# node-hid - Access USB HID devices from node.js #\n\n## Installation\n```\nnpm install node-hid\n```\n\n### Prerequisites:\n\n* [Node.js](https://nodejs.org/) v0.8 - v4.x+\n* Mac OS X 10.8, Linux (kernel 2.6+), and Windows XP+\n* libudev-dev, libusb-1.0-0-dev (if Linux, see Compile below)\n* [git](https://git-scm.com/)\n\nnode-hid now uses node-pre-gyp to store pre-built binary bundles, so usually no compiler is needed to install!\n\nPlatforms we pre-build node-hid binaries for:\n- Mac OS X x64: v0.10, v0.12, v4.2.x\n- Windows x64 & x86: v0.10, v0.12, v4.2.x\n- Linux Debian/Ubuntu x64: v4.2.x\n- Raspberry Pi arm: v4.2.x\n\nIf node-hid doesn't have a pre-built binary for your system, it will attempt to compile locally.  In which case you'll need the **Compiler tools** mentioned below.\n\n## Test it\n\nIn the `src/` directory, various JavaScript programs can be found\nthat talk to specific devices in some way.  Some interesting ones:\n- [`show-devices.js`](https://github.com/node-hid/node-hid/blob/master/src/show-devices.js) - display all HID devices in the system\n- [`test-ps3-rumbleled.js`](https://github.com/node-hid/node-hid/blob/master/src/test-ps3-rumbleled.js) - Read PS3 joystick and control its LED & rumblers.\n- [`powermate.js`](https://github.com/node-hid/node-hid/blob/master/src/powermate.js) - Read Griffin PowerMate knob and change its LED\n\nTo try them out, call them like `node src/showdevices.js` from the node-hid directory.\n\n## How to Use\n\n### Load the module\n\n```\nvar HID = require('node-hid');\n```\n\n### Get a list of all HID devices in the system:\n\n```\nvar devices = HID.devices()\n```\n\n`devices` will contain an array of objects, one for each HID device\navailable.  Of particular interest are the `vendorId` and\n`productId`, as they uniquely identify a device, and the\n`path`, which is needed to open a particular device.\n\nHere is some sample output:\n```\nHID.devices();\n[ { vendorId: 1452,\n    productId: 595,\n    path: 'USB_05ac_0253_0x100a148e0',\n    serialNumber: '',\n    manufacturer: 'Apple Inc.',\n    product: 'Apple Internal Keyboard / Trackpad',\n    release: 280,\n    interface: -1 },\n  { vendorId: 1452,\n    productId: 595,\n    path: 'USB_05ac_0253_0x100a14e20',\n    serialNumber: '',\n    manufacturer: 'Apple Inc.',\n    product: 'Apple Internal Keyboard / Trackpad',\n    release: 280,\n    interface: -1 },\n<and more>\n```\n\n### Opening a device\n\nBefore a device can be read from or written to, it must be opened.\nThe `path` can\nbe determined by a prior HID.devices() call. Use either the `path` from\nthe list returned by a prior call to `HID.devices()`:\n```\nvar device = new HID.HID(path);\n```\nor open the first device matching a VID/PID pair:\n```\nvar device = new HID.HID(vid,pid);\n```\n\n`device` will contain a handle to the device.\nIf an error occurs opening the device, an exception will be thrown.\n\n### Reading from a device\n\nReading from a device is performed by registering a \"data\" event\nhandler:\n\n```\ndevice.on(\"data\", function(data) {});\n```\n\nYou can also listen for errors like this:\n\n```\ndevice.on(\"error\", function(err) {});\n```\n\nAll reading is asynchronous.\n\n### Writing to a device\n\nWriting to a device is performed using the write call in a device\nhandle.  All writing is synchronous.\n\n```\ndevice.write([0x00, 0x01, 0x01, 0x05, 0xff, 0xff]);\n```\nNotes:\n- The `write()` method sends OUTPUT reports. To send Feature reports,\nsee the `sendFeatureReport()` method below.\n- Some devices use reportIds for OUTPUT reports.  If that is the case,\nthe first byte of the array to `write()` should be the reportId.\n\n\n## Complete API\n\n```\nvar device = new HID.HID(path);\n```\n\n### Event: \"data\"\n\n- `chunk` - Buffer - the data read from the device\n\n### Event: \"error\"\n\n- `error` - The error Object emitted\n\n### device.write(data)\n\n- `data` - the data to be synchronously written to the device\n\n### device.close()\n\nCloses the device. Subsequent reads will raise an error.\n\n### device.pause()\n\nPauses reading and the emission of `data` events.\n\n### device.resume()\n\nThis method will cause the HID device to resume emmitting `data` events.\nIf no listeners are registered for the `data` event, data will be lost.\n\nWhen a `data` event is registered for this HID device, this method will\nbe automatically called.\n\n### device.read(callback)\n\nLow-level function call to initiate an asynchronous read from the device.\n`callback` is of the form `callback(err, data)`\n\n### device.sendFeatureReport(data)\n- `data` - data of HID feature report, with 0th byte being report_id (`[report_id,...]`)\n\n### device.getFeatureReport(report_id, report_length)\n- `report_id` - HID feature report id to get\n- `report_length` - length of report\n\n\n## Compiling from source for development\n\nTo compile & develop locally (or if node-pre-gyp cannot find a pre-built binary for you), you will need the following tools:\n* Mac OS X 10.8+\n    * [Xcode](https://itunes.apple.com/us/app/xcode/id497799835?mt=12)\n* Windows XP+\n    * [Python 2.7](https://www.python.org/downloads/windows/)\n    * node-gyp installed globally (`npm install -g node-gyp`)\n    * [Visual Studio Express 2013 for Desktop](https://www.visualstudio.com/downloads/download-visual-studio-vs#d-2013-express)\n* Linux (kernel 2.6+)\n    * Compiler tools (`apt-get install build-essential git` for Debin/Ubuntu/Raspian)\n    * libudev-dev (Fedora: `yum install libusbx-devel`)\n    * libusb-1.0-0-dev (Ubuntu versions missing `libusb.h` only)\n    * gcc-4.8+ (`apt-get install gcc-4.8 g++-4.8 && export CXX=g++-4.8`)\n\nYou'll also need to issue the following command in the 'node-hid' directory:\n```\ngit submodule update --init   # done on publish automatically\nnpm install       # rebuilds the module\n```\n\n## Support\n\nPlease use the [node-hid github issues page](https://github.com/node-hid/node-hid/issues)\nfor support questions and issues.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/node-hid/node-hid/issues"
  },
  "homepage": "https://github.com/node-hid/node-hid",
  "bundleDependencies": [
    "node-pre-gyp"
  ],
  "_id": "node-hid@0.5.1",
  "_from": "node-hid@~0.5.0"
}
